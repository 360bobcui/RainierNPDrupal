<?php


//function site_reservation_settings() {
//  $form = array();
//  $form['#submit'][] = 'site_selection_form_submit';
//  dsm($form);
//  return system_settings_form($form);
//}

/*
  implement hook_permision()
 */
function site_reservation_permission(){
    return array(
      'submit site reservation' => array(
        'title' => t('Submit Reservations!!'),
        'description' => t('Submit site reservations')
      ),
      'site selections' => array(
       'title' => t('Site Selections!!'),
        'description' => t('Select site locations')
      ),
      
      'administer site locations' => array(
       'title' => t('Administer Site Locations'),
        'description' => t('Manage site locations and capacities')
      ),
      
      'site submitted itinerary' => array(
       'title' => t('Submitted Itinerary Confirmation Page'),
        'description' => t('Itinerary confirmation page')
      ),
    );
}

/*
 * implements hook_menu() ;
 */ 
function site_reservation_menu() {
  $items['site_reservation'] = array(
    'title' => 'Camp Site Reservation',
    //'type' => MENU_NORMAL_ITEM,
    'description' => 'allow users reserve camp sites.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_reservation_form'), // shall match the name in hook_form
    'access arguments' => array('submit site reservation'), //shall match the name in hook_permision
   // 'access callback'=> 'flag_application_permission',
    'weight' => 0,
   // 'file' => 'site_reservation.users.inc',
  );
  
  $items['site_selection'] = array(
    'title' => 'Camp Site Selection',
    'type' => MENU_SUGGESTED_ITEM,
    'description' => 'allow users select camp sites.',
    //'page callback' => 'site_selection_form', // match the function defined below
    'page callback' => 'drupal_get_form',
   'page arguments' => array('site_selection_form'), // shall match the name in hook_form
    'access arguments' => array('site selections'), //shall match the name in hook_permision
   // 'access callback'=> 'flag_application_permission',
    'file' => 'site_selection.inc',
  );
  
  $items['site_submitted_itinerary'] = array(
    'title' => 'What\'s next?',
    //'prefix' =>
    'type' => MENU_SUGGESTED_ITEM,
    'description' => 'Print out the user itinerary page after submission',
   // 'page callback' => 'site_submitted_itinerary_form', // match the function defined below
    'page callback' => 'drupal_get_form',
   'page arguments' => array('site_submitted_itinerary_form'), // shall match the name in hook_form
    'access arguments' => array('site submitted itinerary'), //shall match the name in hook_permision
     'file' => 'site_itinerary_confirmation.inc',
    
  );
  
  $items['site_admin_manager'] = array(
    'title' => 'Camp Site Manager',
    'type' => MENU_SUGGESTED_ITEM,
    'description' => 'Add and delete the camp sites.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_adminstration_form'),
    'access arguments' => array('administer site locations'),
   // 'access callback'=> 'flag_application_permission',
    //'weight' => 0,
    'file' => 'site_admin.admin.inc',
  );
  return $items;
}


/*
 *   Create site reservation form
 */
function site_reservation_form($form, &$form_state) {
  // dsm($form);
  // dsm($form_state);
  $format = 'Ymd';
  $date = date($format);

  $form['arrival_date'] = array(
     '#type' => 'date_select', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
     '#title' => t('Arrival Date'),
     '#default_value' => $date, 
     '#date_format' => $format,
     '#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
     //'#date_timezone' => 'America/Chicago', // Optional, if your date has a timezone other than the site timezone.
     '#date_increment' => 15, // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
     '#date_year_range' => '-50:+3', // Optional, used to set the year range (back 3 years and forward 3 years is the default).
  );
      
    $form['departure_date'] = array(
     '#type' => 'date_select', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
     '#title' => t('Departure Date'),
     '#default_value' => $date, 
     '#date_format' => $format,
     '#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
     //'#date_timezone' => 'America/Chicago', // Optional, if your date has a timezone other than the site timezone.
     '#date_increment' => 15, // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
     '#date_year_range' => '0:+3', // Optional, used to set the year range (back 3 years and forward 3 years is the default).
  );
    
  $form['date_select'] = array(
    '#type' => 'submit',
    '#name' => 'date_select_btn',
    '#value' => t('Submit'),
    '#submit' => array('site_reservation_sumbit_handler'),
    );  
 
  return $form;
}

/*
 * validate the submitted  TODO: make sure the dates entered are correct
 */
function site_reservation_form_validate($form, &$form_state) {
  //dsm($form_state);
//  dsm($form);
  $ad = $form_state["values"]["arrival_date"];
  $dd = $form_state["values"]["departure_date"];
  arrival_date_departure_date_validation($ad, $dd, 'arrival_date', 'departure_date');
}

/*
 * Validate the arrival date and departure date passed in. 
 */
function arrival_date_departure_date_validation($ad, $dd, $ad_id, $dd_id) {
   if ($ad == "") {
    form_set_error("arrival_date", "You have entered an invalid arrival date");
  } else if ($dd == ""){
    form_set_error("departure_date", "You have entered an invalid departure date");
  }else {
    $adArr = explode('-', $ad); // 2016-08-18
    $ddArr = explode('-', $dd);
   
   $ad_date = mktime(0, 0, 0, $adArr[1], $adArr[2], $adArr[0]);  
   $dd_date = mktime(0, 0, 0, $ddArr[1], $ddArr[2], $ddArr[0]);  
    
//   dsm($ad_date);
//   dsm($dd_date);
//   dsm(date("Y-m-d H:i:s"));  //print: 2016-08-19 09:35:34
//   dsm(time());
    if ($ad_date - time() < 0) {
      form_set_error($ad_id, "Please choose a future date.");
    }    
    if ($dd_date - time() < 0) {
      form_set_error($dd_id, "Please choose a future date.");
    }
    if ($ad_date - $dd_date > 0){
      form_set_error($dd_id, "Departure Date should be no earlier than Arrival Date");
    }    
  } 
  
}


/*
 * validate the submitted 
 */
 //function site_reservation_form_submit($form, &$form_state) {
  function site_reservation_sumbit_handler($form, &$form_state) {
//function site_reservation_sumbit_handler($form, &$form_state) {
  $options = array('query' => array(
    "arrival_date" => $form_state["values"]["arrival_date"], 
    "departure_date" => $form_state["values"]["departure_date"],)
    );
  drupal_goto('site_selection', $options);  
  //drupal_goto('site_selection');
}
